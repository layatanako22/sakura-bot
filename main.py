import json
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8163045913:AAHCTNVwoLB4IkDZ1vyKtcHaKHnpsO7jNnE"
OWNER_ID = 7143090611
OWNER_GROUP_ID = -1002735599328

# === –¢–û–í–ê–†–´ ===
shop_items = {
    "üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—É—Å—Ç": 150,
    "üé≠ –°–º–µ–Ω–∞ —Ä–æ–ª–∏": 300,
    "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É": 200,
    "üéü –í—Ö–æ–¥ –Ω–∞ –∏–≤–µ–Ω—Ç": 50,
    "‚öîÔ∏è –¢—É–ø–æ–π –º–µ—á": 200,
    "üõ° –©–∏—Ç —Ñ–ª—É–¥–∞": 200,
    "üßº –ò–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç —á–∏—Å—Ç–∫–∏": 600,
    "üíÖ –°–∫–∏–Ω –¢–µ–π–≤–∞—Ç–∞": 400,
    "üö´ –ö—É–ø–∏ —Å–µ–±–µ –±–∞–Ω": 1000,
    "üôä –ù–µ –º—É—Ç–∞–π—Ç–µ –º–µ–Ω—è": 700,
    "üëë –†–æ–ª—å –ê–¥–º–∏–Ω–∞": 1500,
    "üî• –°—É–¥–Ω—ã–π –î–µ–Ω—å": 3000,
    "üìå –ó–∞–∫—Ä–µ–ø —Å–æ–æ–±—â–µ–Ω–∏—è": 500,
    "üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è –æ—Ç –±–æ—Ç–∞": 250,
    "üíå –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": 200,
    "üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Ä–æ–ª—å": 350,
    "üîÆ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ": 500,
    "‚öñÔ∏è –û–±–≤–∏–Ω–µ–Ω–∏–µ –≤ —Ö–∞–æ—Å–µ": 250,
    "üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º": 150
}

quotes = [
    "–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.",
    "–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –∞ —Å –æ–ø—ã—Ç–æ–º.",
    "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —ç—Ç–æ —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
]

prophecies = [
    "–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî —Ä–∏—Å–∫–Ω–∏!",
    "–û—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è –ø–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –≤–µ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã.",
    "–î–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞."
]

roles = [
    "–†—ã—Ü–∞—Ä—å –û—Ä–¥–æ –§–∞–≤–æ–Ω–∏—É—Å", "–î–µ–Ω–¥—Ä–æ –ê—Ä—Ö–æ–Ω—Ç", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ò–Ω–∞–¥–∑—É–º—ã",
    "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –¢–µ–π–≤–∞—Ç–∞", "–ü–æ—Å–ª–∞–Ω–Ω–∏–∫ –¶—É—Ä—É–º–∏", "–û—Ä–∞–∫—É–ª —Ñ–∞—Ç—É–∏", "–ö–∞–ø–∏—Ç–∞–Ω —Ñ–ª–æ—Ç–∞ –ë—ç–π –î–æ—É"
]

def load_users():
    try:
        with open("users.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f, indent=2)

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_users()
    if str(user.id) not in users:
        users[str(user.id)] = {
            "name": user.username or user.first_name,
            "balance": 200,
            "boost_until": None
        }
        save_users(users)
        await update.message.reply_text(f"üå∏ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–∏–ª 200 —Å–∞–∫—É—Ä.")
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_users()
    data = users.get(str(user.id))
    if not data:
        await update.message.reply_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return
    text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{data['name']}\nüí∞ –ë–∞–ª–∞–Ω—Å: {data['balance']} üå∏"
    if data.get("boost_until"):
        text += f"\nüìà –ë—É—Å—Ç –¥–æ: {data['boost_until']}"
    await update.message.reply_text(text)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"{item} ‚Äî {price} üå∏", callback_data=f"buy_{item}")]
        for item, price in shop_items.items()
    ]
    await update.message.reply_text("üõç –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    users = load_users()
    user_data = users.get(str(user.id))
    if not user_data:
        await query.edit_message_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    item = query.data.replace("buy_", "").strip()
    price = shop_items.get(item)
    if not price:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user_data["balance"] < price:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–∫—É—Ä.")
        return

    user_data["balance"] -= price

    if item == "üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—É—Å—Ç":
        if user_data.get("boost_until"):
            await query.edit_message_text("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –±—É—Å—Ç!")
            return
        user_data["boost_until"] = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")

    save_users(users)

    if item == "üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è –æ—Ç –±–æ—Ç–∞":
        await query.edit_message_text(f"üß† –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n¬´{random.choice(quotes)}¬ª")
        return

    elif item == "üîÆ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ":
        await query.edit_message_text(f"üåå –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ:\n{random.choice(prophecies)}")
        return

    elif item == "üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Ä–æ–ª—å":
        await query.edit_message_text(f"üé≠ –¢–≤–æ—è —Ä–æ–ª—å: {random.choice(roles)}")
        return

    elif item == "üíå –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await query.edit_message_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n/sendmsg <username> <—Ç–µ–∫—Å—Ç>")
        return

    elif item == "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É":
        await query.edit_message_text("üéÅ –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å —Å–∞–∫—É—Ä—ã –¥—Ä—É–≥—É, –∏—Å–ø–æ–ª—å–∑—É–π:\n/gift <user_id> <—Å—É–º–º–∞>")
        return

    try:
        await context.bot.send_message(
            chat_id=OWNER_GROUP_ID,
            text=(
                f"üõç –ü–æ–∫—É–ø–∫–∞!\n"
                f"üë§ @{user.username or user.first_name} ({user.id})\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {item}\n"
                f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {price} üå∏\n"
                f"üíº –û—Å—Ç–∞—Ç–æ–∫: {user_data['balance']} üå∏"
            )
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")

async def boost_checker():
    while True:
        users = load_users()
        today = datetime.now().strftime("%Y-%m-%d")
        for uid, data in users.items():
            if data.get("boost_until") == today:
                data["balance"] += 200
                data["boost_until"] = None
        save_users(users)
        await asyncio.sleep(86400)

async def send_anonymous(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /sendmsg <username> <—Ç–µ–∫—Å—Ç>")
        return

    username = context.args[0].lstrip("@")
    message = " ".join(context.args[1:])
    users = load_users()
    for uid, data in users.items():
        if data.get("name") == username:
            await context.bot.send_message(chat_id=int(uid), text=f"üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message}")
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return

    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    try:
        uid = context.args[0]
        amount = int(context.args[1])
    except:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /give <user_id> <—Å—É–º–º–∞>")
        return

    users = load_users()
    if uid not in users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    users[uid]["balance"] += amount
    save_users(users)

    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} üå∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{users[uid]['name']}")

async def gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_users()
    user_data = users.get(str(user.id))

    if not user_data:
        await update.message.reply_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /gift <user_id> <—Å—É–º–º–∞>")
        return

    uid = context.args[0]
    try:
        amount = int(context.args[1])
    except:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —á–∏—Å–ª–æ.")
        return

    if uid not in users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if amount < 200:
        await update.message.reply_text("üéÅ –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ ‚Äî 200 üå∏.")
        return

    if user_data["balance"] < amount:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∞–∫—É—Ä.")
        return

    user_data["balance"] -= amount
    users[uid]["balance"] += amount
    save_users(users)

    await update.message.reply_text(f"üéâ –¢—ã –ø–µ—Ä–µ–¥–∞–ª {amount} üå∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{users[uid]['name']}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/shop ‚Äî –º–∞–≥–∞–∑–∏–Ω\n"
        "/gift ‚Äî –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É\n"
        "/sendmsg ‚Äî –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/give ‚Äî –ù–∞—á–∏—Å–ª–∏—Ç—å –≤–∞–ª—é—Ç—É (–∞–¥–º–∏–Ω)\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("gift", gift))
    app.add_handler(CommandHandler("give", give))
    app.add_handler(CommandHandler("sendmsg", send_anonymous))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_purchase))

    asyncio.create_task(boost_checker())
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.bot.send_message(chat_id=OWNER_GROUP_ID, text="üîî –ü—Ä–æ–≤–µ—Ä–∫–∞: –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É.")
    await app.run_polling()

from keep_alive import keep_alive  # ‚Üê —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

...

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    keep_alive()  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –î–û asyncio.run()
    asyncio.run(main())